case $- in
    *i*) ;;
      *) return;;
esac

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

build_profile=$([[ "$BASH_VERSION" == *-release ]] || echo "(${BASH_VERSION##*-})")
if [ "$color_prompt" = yes ]; then
	PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\b\[\033[00m\]\[\033[01;35m\]\w\[\033[00m\]'$build_profile'🍣 '
else
	PS1='\u@\h:\w'$build_profile'🍣 '
fi 


case "$TERM" in
xterm*|rxvt*)
    PS1="\[\033]2;\u@\h: \w\007\]$PS1"
    ;;
*)
    ;;
esac


PS2='> '
PS4='+ '
alias ll='ls -l'
alias git-writing='git add -A ; git commit -m Writing ; git push'


# completion test
# thanks to: https://blog.cybozu.io/entry/2016/09/26/080000

#_dummy () {
#	COMPREPLY=( $(compgen -W "one two" -- "${cur}" ) ) 
#} && complete -F _dummy hoge
#
#_git_comp () {
#	if [ "$COMP_CWORD" = 1 ] ; then 
#		CANDS=( $( git |& grep '^  *[a-z]' | awk '{print $1}') ) 
#		COMPREPLY=( $(compgen -W "${CANDS[@]}" -- "${cur}") ) 
#	elif [ "$COMP_CWORD" = 2 -a "$prev" = switch ] ; then
#		COMPREPLY=( $(compgen -W "$( git branch | tr -d '*' )" -- "${cur}" ) ) 
#	elif [ "$COMP_CWORD" = 2 -a "$prev" = merge ] ; then
#		COMPREPLY=( $(compgen -W "$( git branch | tr -d '*' )" -- "${cur}" ) ) 
#	elif [ "$COMP_CWORD" = 2 -a "$prev" = diff ] ; then
#		COMPREPLY=( $(compgen -W "$( git branch | tr -d '*' ) $(compgen -f)" -- "${cur}" ) ) 
#	fi
#} && complete -F _git_comp git
#
#_colcon_comp () {
#        if [ "$COMP_CWORD" = 1 ] ; then 
#                CANDS=( $( colcon |& sed -n 2p | tr , \\n | tr -d '{} ' ) ) 
#                COMPREPLY=( $(compgen -W "${CANDS[@]}" -- "${cur}") ) 
#        fi
#} && complete -F _colcon_comp colcon

complete -A stopped -P '"%' -S '"' bg
complete -a unalias
complete -c sudo xargs which
complete -j -P '"%' -S '"' disown fg jobs
complete -u groups w
complete -v unset
complete -A setopt set

command_not_found_handle() {
	if [ -e /usr/lib/command-not-found ] ; then
		/usr/lib/command-not-found -- "$1"
	fi
}

#. /usr/share/bash-completion/bash_completion
#. ~/GIT/bash-completion/bash_completion
